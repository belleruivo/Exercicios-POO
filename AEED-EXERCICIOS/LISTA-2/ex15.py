# Escreva um algoritmo que receba um vetor ordenado e um n칰mero extra e insira esse
# n칰mero na sua posi칞칚o correta no vetor ordenado, deslocando os outros n칰meros, se
# necess치rio. Qual 칠 a complexidade no melhor e no pior caso deste algoritmo?

print('-------------------------------------------------')
print('---------------------VETORES---------------------')
print('-------------------------------------------------')

def main(vetor, numeroExtra):
    #i = 0
    #while i < len(vetor) and vetor[i] < numeroExtra: #encontrar posi칞칚o
    
    for i in range(len(vetor)):
        if vetor[i] >= numeroExtra:
            vetor.insert(i, numeroExtra)
            break
        else:
            continue
    if numeroExtra > vetor[i]:
        vetor.append(numeroExtra)
            

vetor = [1, 3, 5, 7, 9]
while True:
    try:
        numeroExtra = int(input("Digite um valor: "))
        break
    except ValueError:
        print("Por favor, insira um n칰mero inteiro!\n")

main(vetor, numeroExtra)
print(vetor) 


# MELHOR CASO => Se o numeroExtra for maior que todos os elementos do vetor, ser치 adicionado no fim. Nesse caso, o la칞o while
# ser치 percorrido 


#Melhor Caso: Se o numerExtra for maior que os elementos do vetor, ele ser치 adicionado no final. Nesse caso,
#o la칞o while ser치 percorrido apenas uma vez para comparar com o maior elemento, e o insert() 
# ser치 executado em tempo constante 洧녝(1)O(1). Portanto, a complexidade no melhor caso 칠 洧녝(1)O(1).

# Pior Caso: No pior cen치rio, o numeroExtra ser치 menor que todos os elementos do vetor, 
# o que significa que o algoritmo ter치 que percorrer todo o vetor para encontrar a posi칞칚o e, em seguida, 
# deslocar todos os elementos para abrir espa칞o. Isso faz com que a complexidade no pior caso seja 洧녝(洧녵)O(n)
# onde n n 칠 o tamanho do vetor, j치 que ser치 necess치rio percorrer e deslocar 洧녵 n elementos.